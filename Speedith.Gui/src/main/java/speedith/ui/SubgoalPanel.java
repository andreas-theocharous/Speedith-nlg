/*
 *   Project: Speedith
 * 
 * File name: SubgoalPanel.java
 *    Author: Matej Urbas [matej.urbas@gmail.com]
 * 
 *  Copyright Â© 2012 Matej Urbas
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package speedith.ui;

import speedith.core.lang.SpiderDiagram;

import java.awt.*;

/**
 *
 * @author Matej Urbas [matej.urbas@gmail.com]
 */
public class SubgoalPanel extends javax.swing.JPanel {

    // <editor-fold defaultstate="collapsed" desc="Fields">
    private int subgoalIndex = 0;
    // </editor-fold>

    /**
     * Creates new form SubgoalPanel
     */
    public SubgoalPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSubdiagramIndex = new javax.swing.JLabel();
        spiderDiagramPanel1 = new speedith.ui.SpiderDiagramPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        lblSubdiagramIndex.setBackground(new java.awt.Color(244, 242, 242));
        lblSubdiagramIndex.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lblSubdiagramIndex.setForeground(new java.awt.Color(102, 102, 102));
        lblSubdiagramIndex.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSubdiagramIndex.setText(getSubdiagramIndexText());
        lblSubdiagramIndex.setMinimumSize(new java.awt.Dimension(25, 35));
        lblSubdiagramIndex.setOpaque(true);
        lblSubdiagramIndex.setPreferredSize(new java.awt.Dimension(25, 35));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblSubdiagramIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(spiderDiagramPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spiderDiagramPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(lblSubdiagramIndex, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblSubdiagramIndex;
    private speedith.ui.SpiderDiagramPanel spiderDiagramPanel1;
    // End of variables declaration//GEN-END:variables

    // <editor-fold defaultstate="collapsed" desc="Public Properties">
    public int getSubgoalIndex() {
        return subgoalIndex;
    }

    /**
     * This number is incremented by one and is then displayed on the left of
     * the diagram. <p>If you specify a negative number, the label on the left
     * will be empty.</p>
     *
     * @param subgoalIndex
     */
    public void setSubgoalIndex(int subgoalIndex) {
        if (this.subgoalIndex != subgoalIndex) {
            this.subgoalIndex = subgoalIndex;
            lblSubdiagramIndex.setText(getSubdiagramIndexText());
        }
    }

    public SpiderDiagram getDiagram() {
        return this.spiderDiagramPanel1.getDiagram();
    }

    public void setDiagram(SpiderDiagram diagram) {
        this.spiderDiagramPanel1.setDiagram(diagram);
        this.setPreferredSize(new Dimension(spiderDiagramPanel1.getPreferredSize().width+ lblSubdiagramIndex.getPreferredSize().width,
                spiderDiagramPanel1.getPreferredSize().height));
        this.setMinimumSize(new Dimension(spiderDiagramPanel1.getMinimumSize().width+ lblSubdiagramIndex.getMinimumSize().width,
                spiderDiagramPanel1.getMinimumSize().height));

    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="UI Refresh Methods">
    private String getSubdiagramIndexText() {
        if (getSubgoalIndex() >= 0) {
            return Integer.toString(getSubgoalIndex() + 1);
        } else {
            return "";
        }
    }
    // </editor-fold>
}
